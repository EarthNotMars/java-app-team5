#!/usr/bin/env groovy
properties([disableConcurrentBuilds()])

TARGET_BRANCH_NAME = "jenkins-dev5"

pipeline {
  agent {
    label 'ubuntu'
  }

  options {
    timestamps()
  }

  environment {
    IP_ADDRESS_VM1 = ''
    IP_ADDRESS_VM2 = ''
    IP_ADDRESS_HAPROXY = ''
  }

  stages {
    stage('Check ansible') {
      steps {
        script {
          IP_ADDRESS_VM1 = sh (script: 'az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm0-eastus-crashcourse  --query publicIps -o tsv', returnStdout: true)
          IP_ADDRESS_VM2 = sh (script: 'az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm1-eastus-crashcourse  --query publicIps -o tsv', returnStdout: true)
          IP_ADDRESS_HAPROXY = sh (script: 'az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm2-eastus-crashcourse  --query publicIps -o tsv', returnStdout: true)
          IP_ADDRESS_VM1 = IP_ADDRESS_VM1.substring(0, IP_ADDRESS_VM1.length()-1)
          IP_ADDRESS_VM2 = IP_ADDRESS_VM2.substring(0, IP_ADDRESS_VM2.length()-1)
          IP_ADDRESS_HAPROXY = IP_ADDRESS_HAPROXY.substring(0, IP_ADDRESS_HAPROXY.length()-1)
        }
        sh "git checkout '${TARGET_BRANCH_NAME}'"
        sh "ansible --version"
        deleteDir() // Clean up the workspace
        checkout scm
      }
    }

    stage('Prepare hosts file') {
      steps {
        withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
          sh "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID"
          sh "az account set --subscription $AZURE_SUBSCRIPTION_ID"
        }
        withCredentials([usernamePassword(credentialsId: 'vms_loginpass', usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')]) {
          sh """
            cd ./ansible_tomcat/
            echo "[team5]" > hosts && echo "${IP_ADDRESS_VM1} ansible_user=$LOGIN ansible_password=$PASSWORD" >> hosts
          """
        }
      }
    }

    stage('Restore database') {
      steps {
        script {
          withCredentials([file(credentialsId: 'backup_db', variable: 'backup_db')]) {
            withCredentials([usernamePassword(credentialsId: 'db_loginpass', usernameVariable: 'LOGIN_DB1', passwordVariable: 'PASSWORD_DB1')]) {
              sh """
                cp $backup_db ./scripts/crashdb.bacpac
                cd ./scripts/
                sed -i "s/LOGINVALUE/$LOGIN_DB1/" restore_db.sh
                sed -i "s/PASSWORDVALUE/$PASSWORD_DB1/" restore_db.sh
              """
              try {
                sh """
                  cd ./scripts/
                  ./restore_db.sh
                """
              } catch (Exception er) {
                echo "Failed to restore database"
              }
            }
          }
        }
      }
    }

    stage('Build artifact') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'db_loginpass', usernameVariable: 'LOGIN_DB2', passwordVariable: 'PASSWORD_DB2')]) {
          sh """
            cp ./scripts/replacement.sh ./app/WEB-INF/
            cd ./app/WEB-INF/
            sed -i "s/LOGINVALUE/$LOGIN_DB2/" replacement.sh
            sed -i "s/PASSWORDVALUE/$PASSWORD_DB2/" replacement.sh
            ./replacement.sh
            rm ./replacement.sh
          """
        }
        sh """
          cd ./app/
          sed -i "s/You Don't have an account?/VM1 You Don't have an account?/" index.jsp
        """
        sh "jar -cvf tomcat.war ./app/"
        sh "cp tomcat.war ./ansible_tomcat/tomcat.war"
      }
    }

    stage('Run ansible playbook') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'vms_loginpass', usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')]) {
          sh """
            cd ./ansible_tomcat/
            ansible-playbook -i hosts tomcat.yml
            sudo rm tomcat.war
            echo "[team5]" > hosts && echo "${IP_ADDRESS_VM2} ansible_user=$LOGIN ansible_password=$PASSWORD" >> hosts
            cd ../app/
            sed -i "s/VM1 You Don't have an account?/VM2 You Don't have an account?/" index.jsp
            cd .. && jar -cvf tomcat.war ./app/
            cp tomcat.war ./ansible_tomcat/tomcat.war
            cd ./ansible_tomcat/
            ansible-playbook -i hosts tomcat.yml
          """
        }
      }
    }

    stage('Run load balancer') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'vms_loginpass', usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')]) {
          withCredentials([usernamePassword(credentialsId: 'haproxy_stats', usernameVariable: 'LOGIN_HAP', passwordVariable: 'PASSWORD_HAP')]) {
            sh """
              sed -i "s/192.168.1.3/${IP_ADDRESS_VM1}/" haproxy.cfg
              sed -i "s/192.168.1.4/${IP_ADDRESS_VM2}/" haproxy.cfg
              sed -i "s/someuser/$LOGIN_HAP/" haproxy.cfg
              sed -i "s/password/$PASSWORD_HAP/" haproxy.cfg
              cd ./ansible_haproxy/
              echo "[team5]" > hosts && echo "${IP_ADDRESS_HAPROXY} ansible_user=$LOGIN ansible_password=$PASSWORD" >> hosts
              sudo cp ../haproxy.cfg ./haproxy.cfg
              ansible-playbook -i hosts done_haproxy.yml
            """
          }
        }
      }
    }
  }
}