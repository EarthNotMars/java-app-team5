#!/usr/bin/env groovy
properties([disableConcurrentBuilds()])

TARGET_BRANCH_NAME = "jenkins-dev2"

pipeline {
  agent {
    label 'ubuntu'
  }
  triggers { pollSCM('* * * * *') }
  options {
    timestamps()
  }

  stages {
    environment {
      IP_ADDRESS = sh(script: 'az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm0-eastus-crashcourse  --query publicIps -o tsv', , returnStdout: true).trim()
    }
    stage('Check ansible') {
      steps {
        // slackSend (color: '#FFFF00', message: "STARTED: Pipeline2 '${env.JOB_NAME}.[${env.BUILD_NUMBER}]':(${env.JOB_DISPLAY_URL})")
        sh "git checkout '${TARGET_BRANCH_NAME}'"
        sh "ansible --version"
        deleteDir() // Clean up the workspace
        checkout scm
      }
    }

    stage('Prepare hosts file') {
      steps {
        withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
          sh "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID"
          sh "az account set --subscription $AZURE_SUBSCRIPTION_ID"
        }
        withCredentials([usernamePassword(credentialsId: 'vms_loginpass', usernameVariable: 'LOGIN', passwordVariable: 'PASSWORD')]) {
        sh """
          cd ./ansible_tomcat/
          echo "[team5]" > hosts && echo "`az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm0-eastus-crashcourse  --query publicIps -o tsv` ansible_user=$LOGIN ansible_password=$PASSWORD" >> hosts
          echo "`az vm show -d -g prd-vm-rg-eastus-crashcourse  -n prd-vm1-eastus-crashcourse  --query publicIps -o tsv` ansible_user=$LOGIN ansible_password=$PASSWORD" >> hosts
        """
        }
      }
    }

    stage('Restore database') {
      steps {
        script {
          withCredentials([file(credentialsId: 'backup_db', variable: 'backup_db')]) {
            withCredentials([usernamePassword(credentialsId: 'db_loginpass', usernameVariable: 'LOGIN_DB1', passwordVariable: 'PASSWORD_DB1')]) {
              sh """
                cp $backup_db ./scripts/crashdb.bacpac
                cd ./scripts/
                sed -i "s/LOGINVALUE/$LOGIN_DB1/" restore_db.sh
                sed -i "s/PASSWORDVALUE/$PASSWORD_DB1/" restore_db.sh
              """
              try {
                sh "./scripts/restore_db.sh"
              } catch (Exception er) {
                echo "Failed to restore database"
              }
            }
          }
        }
      }
    }

    stage('Build artifact') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'db_loginpass', usernameVariable: 'LOGIN_DB2', passwordVariable: 'PASSWORD_DB2')]) {
          sh """
            cp ./scripts/replacement.sh ./app/WEB-INF/
            cd ./app/WEB-INF/
            sed -i "s/LOGINVALUE/$LOGIN_DB2/" replacement.sh
            sed -i "s/PASSWORDVALUE/$PASSWORD_DB2/" replacement.sh
            ./replacement.sh
            rm ./replacement.sh
          """
        }
        sh "jar -cvf tomcat.war ./app/"
        sh "cp tomcat.war ./ansible_tomcat/tomcat.war"
      }
    }

    stage('Run ansible playbook') {
      steps {
        sh """
          cd ./ansible_tomcat/
          ansible-playbook -i hosts tomcat.yml
        """


        echo "Ip address: ${IP_ADDRESS}:8080"
      }
    }
  }

}