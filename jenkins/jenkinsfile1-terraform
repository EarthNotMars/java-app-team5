#!/usr/bin/env groovy
properties([disableConcurrentBuilds()])

TARGET_BRANCH_NAME = "master"

pipeline {
  agent {
    label 'ubuntu'
  }
  triggers { pollSCM('* * * * *') }
  options {
    timestamps()
  }

  stages {
    stage('Check terraform') {
      steps {
        sh "terraform --version"
      }
    }

    stage('Az login'){
      steps {
        withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
          sh "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID"
          sh "az account set --subscription $AZURE_SUBSCRIPTION_ID"
        }
      }
    }

    stage('Terraform init') {
      steps {
        sh "git checkout '${TARGET_BRANCH_NAME}'"
        withCredentials([file(credentialsId: 'tfvars', variable: 'tfvars')]) {
          sh "sudo cp $tfvars ./tf_vms/terraform.tfvars"
          sh "sudo cp $tfvars ./tf_sqlserver/terraform.tfvars"
        }
        sh """
          cd ./tf_vms/
          terraform init --get=true
          cd ../tf_sqlserver/
          terraform init --get=true
        """
      }
    }

    stage('Terraform plan') {
      steps {
        sh """
          cd ./tf_sqlserver/
          terraform plan -out=bd_plan.out -no-color
          cd ../tf_vms/
          terraform plan -out=vm_plan.out -no-color
        """
      }
    }

    stage('Terraform apply database') {
      steps {
        sh "cd ./tf_sqlserver/"
        sh "terraform apply -auto-approve -no-color bd_plan.out"
      }
    }

    stage('Terraform apply vm') {
      steps {
        sh "cd ./tf_vms/"
        sh "terraform apply -auto-approve -no-color vm_plan.out"
      }
    }
  }
}